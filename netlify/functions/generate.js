const fetch = require('node-fetch');

// Unicode Character Maps - VOLLST√ÑNDIG
const UNICODE_BOLD = {
    'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ',
    'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì',
    'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô',
    'a': 'ùêö', 'b': 'ùêõ', 'c': 'ùêú', 'd': 'ùêù', 'e': 'ùêû', 'f': 'ùêü', 'g': 'ùê†', 'h': 'ùê°', 'i': 'ùê¢', 'j': 'ùê£',
    'k': 'ùê§', 'l': 'ùê•', 'm': 'ùê¶', 'n': 'ùêß', 'o': 'ùê®', 'p': 'ùê©', 'q': 'ùê™', 'r': 'ùê´', 's': 'ùê¨', 't': 'ùê≠',
    'u': 'ùêÆ', 'v': 'ùêØ', 'w': 'ùê∞', 'x': 'ùê±', 'y': 'ùê≤', 'z': 'ùê≥',
    '0': 'ùüé', '1': 'ùüè', '2': 'ùüê', '3': 'ùüë', '4': 'ùüí', '5': 'ùüì', '6': 'ùüî', '7': 'ùüï', '8': 'ùüñ', '9': 'ùüó',
    '√§': 'ùêöÃà', '√∂': 'ùê®Ãà', '√º': 'ùêÆÃà', '√Ñ': 'ùêÄÃà', '√ñ': 'ùêéÃà', '√ú': 'ùêîÃà', '√ü': 'ùê¨ùê¨',
    '-': '-', ' ': ' ', '!': '!', '.': '.', ',': ',', ':': ':', ';': ';', '?': '?', 
    '(': '(', ')': ')', '[': '[', ']': ']', '/': '/', '&': '&', '@': '@', '#': '#',
    '‚Ç¨': '‚Ç¨', '%': '%', '+': '+', '=': '=', '*': '*', '"': '"', "'": "'", '`': '`'
};

const UNICODE_ITALIC = {
    'A': 'ùòà', 'B': 'ùòâ', 'C': 'ùòä', 'D': 'ùòã', 'E': 'ùòå', 'F': 'ùòç', 'G': 'ùòé', 'H': 'ùòè', 'I': 'ùòê', 'J': 'ùòë',
    'K': 'ùòí', 'L': 'ùòì', 'M': 'ùòî', 'N': 'ùòï', 'O': 'ùòñ', 'P': 'ùòó', 'Q': 'ùòò', 'R': 'ùòô', 'S': 'ùòö', 'T': 'ùòõ',
    'U': 'ùòú', 'V': 'ùòù', 'W': 'ùòû', 'X': 'ùòü', 'Y': 'ùò†', 'Z': 'ùò°',
    'a': 'ùò¢', 'b': 'ùò£', 'c': 'ùò§', 'd': 'ùò•', 'e': 'ùò¶', 'f': 'ùòß', 'g': 'ùò®', 'h': 'ùò©', 'i': 'ùò™', 'j': 'ùò´',
    'k': 'ùò¨', 'l': 'ùò≠', 'm': 'ùòÆ', 'n': 'ùòØ', 'o': 'ùò∞', 'p': 'ùò±', 'q': 'ùò≤', 'r': 'ùò≥', 's': 'ùò¥', 't': 'ùòµ',
    'u': 'ùò∂', 'v': 'ùò∑', 'w': 'ùò∏', 'x': 'ùòπ', 'y': 'ùò∫', 'z': 'ùòª',
    '0': 'ùü¢', '1': 'ùü£', '2': 'ùü§', '3': 'ùü•', '4': 'ùü¶', '5': 'ùüß', '6': 'ùü®', '7': 'ùü©', '8': 'ùü™', '9': 'ùü´',
    '√§': 'ùò¢Ãà', '√∂': 'ùò∞Ãà', '√º': 'ùò∂Ãà', '√Ñ': 'ùòàÃà', '√ñ': 'ùòñÃà', '√ú': 'ùòúÃà', '√ü': 'ùò¥ùò¥',
    '-': '-', ' ': ' ', '!': '!', '.': '.', ',': ',', ':': ':', ';': ';', '?': '?',
    '(': '(', ')': ')', '[': '[', ']': ']', '/': '/', '&': '&', '@': '@', '#': '#',
    '‚Ç¨': '‚Ç¨', '%': '%', '+': '+', '=': '=', '*': '*', '"': '"', "'": "'", '`': '`'
};

// Unicode-Formatierungs-Funktionen
function toBold(text) {
    return text.split('').map(char => UNICODE_BOLD[char] || char).join('');
}

function toItalic(text) {
    return text.split('').map(char => UNICODE_ITALIC[char] || char).join('');
}

// FINALE ROBUSTE FINE TO DINE Post Unicode-Formatierung
function applyFineToDineFormatting(text) {
    let formatted = text.trim();
    
    // SCHRITT 0: Markdown-Bereinigung (Claude generiert oft **bold** markdown)
    formatted = formatted.replace(/\*\*(.*?)\*\*/g, '$1'); // **text** ‚Üí text
    formatted = formatted.replace(/\*(.*?)\*/g, '$1');     // *text* ‚Üí text
    
    // SCHRITT 1: TITEL-FORMATIERUNG (erste Zeile als Bold)
    const lines = formatted.split('\n');
    if (lines.length > 0) {
        const firstLine = lines[0].trim();
        if (firstLine.length > 0) {
            const boldTitle = toBold(firstLine);
            // Erste Zeile exakt ersetzen
            lines[0] = boldTitle;
            formatted = lines.join('\n');
        }
    }
    
    // SCHRITT 2: CTA-FORMATIERUNG (Zeilen die "Erlebe" enthalten)
    const processedLines = formatted.split('\n').map(line => {
        // Suche nach Zeilen die "Erlebe" enthalten
        if (line.includes('Erlebe')) {
            // Finde "Erlebe" Position und formatiere von dort bis Zeilenende
            const erlebeIndex = line.indexOf('Erlebe');
            if (erlebeIndex !== -1) {
                const beforeErlebe = line.substring(0, erlebeIndex);
                const erlebeAndAfter = line.substring(erlebeIndex);
                return beforeErlebe + toItalic(erlebeAndAfter);
            }
        }
        return line;
    });
    
    return processedLines.join('\n');
}

exports.handler = async (event, context) => {
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
    };

    if (event.httpMethod === 'OPTIONS') {
        return { statusCode: 200, headers, body: '' };
    }

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        const { magazinText } = JSON.parse(event.body);
        
        if (!magazinText) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'No text provided' })
            };
        }

        // OPTIMIERTER CLAUDE PROMPT - Fokus auf Content-Struktur
        const prompt = `Erstelle einen Social Media Post f√ºr Facebook/Instagram im FINE TO DINE Stil:

DENKE IN DIESEN ELEMENTEN:
1. TITEL: Restaurant Name + Ort + Kernaussage (erste Zeile)
2. HAUPTTEXT: Personen/Geschichte, dann Besonderheiten, dann Details
3. CALL-TO-ACTION: Beginnt mit "Erlebe" und erw√§hnt "FINE TO DINE Gutschein"
4. VERANSTALTUNGSTIPPS: Falls relevant aus dem Artikel
5. HASHTAGS: #FINETODINE + Ort + spezifische Merkmale

STIL-REGELN:
- Sprache: Emotionale Adjektive, konkrete Details
- Struktur: Personen/Geschichte, dann Besonderheiten, dann Details
- Call-to-Action muss mit "Erlebe" beginnen
- WICHTIG: Verwende KEIN Markdown (**bold** oder *italic*) - nur normalen Text!

BEISPIEL-STRUKTUR:
Restaurant Truube Gais - Bodenst√§ndigkeit mit Michelin-Stern!
Silvia Manser verzaubert mit grundehrlicher und weltoffener K√ºche. Erstklassige regionale Produkte, bedingungslose Frische - vom Amuse-Bouche bis zu hausgemachten Friandises.

Erlebe weltoffene Bodenst√§ndigkeit auf Sterne-Niveau mit deinem FINE TO DINE Gutschein!

#FINETODINE #Gais #MichelinStern #GaultMillau

ARTIKEL: ${magazinText}

Erstelle den Post mit dieser exakten Struktur (nur plain text, kein Markdown):`;

        // STEP 1: Claude generiert Content
        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'x-api-key': process.env.CLAUDE_API_KEY,
                'content-type': 'application/json',
                'anthropic-version': '2023-06-01'
            },
            body: JSON.stringify({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 800,
                messages: [{
                    role: 'user',
                    content: prompt
                }]
            })
        });

        if (!response.ok) {
            throw new Error(`Claude API Error: ${response.status}`);
        }

        const data = await response.json();
        const rawContent = data.content[0].text;

        // STEP 2: JavaScript wendet zuverl√§ssige Unicode-Formatierung an
        const formattedContent = applyFineToDineFormatting(rawContent);
        
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ 
                success: true, 
                content: formattedContent,
                timestamp: new Date().toISOString()
            })
        };

    } catch (error) {
        console.error('Function Error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                success: false, 
                error: error.message 
            })
        };
    }
};